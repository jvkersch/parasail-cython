
# autogenerated by tools/make_functions.py

from _parasail cimport parasail_result, parasail_matrix
from _parasail_base cimport Matrix
from _result cimport Result
from .util import B

cdef extern from "parasail.h":

    parasail_result* _c_parasail_nw "parasail_nw"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table "parasail_nw_table"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol "parasail_nw_rowcol"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace "parasail_nw_trace"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats "parasail_nw_stats"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table "parasail_nw_stats_table"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol "parasail_nw_stats_rowcol"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg "parasail_sg"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table "parasail_sg_table"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol "parasail_sg_rowcol"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace "parasail_sg_trace"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats "parasail_sg_stats"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table "parasail_sg_stats_table"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol "parasail_sg_stats_rowcol"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw "parasail_sw"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table "parasail_sw_table"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol "parasail_sw_rowcol"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace "parasail_sw_trace"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats "parasail_sw_stats"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table "parasail_sw_stats_table"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol "parasail_sw_stats_rowcol"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_scan "parasail_nw_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_scan "parasail_nw_table_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_scan "parasail_nw_rowcol_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_scan "parasail_nw_trace_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_scan "parasail_nw_stats_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_scan "parasail_nw_stats_table_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_scan "parasail_nw_stats_rowcol_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_scan "parasail_sg_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_scan "parasail_sg_table_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_scan "parasail_sg_rowcol_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_scan "parasail_sg_trace_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_scan "parasail_sg_stats_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_scan "parasail_sg_stats_table_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_scan "parasail_sg_stats_rowcol_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_scan "parasail_sw_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_scan "parasail_sw_table_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_scan "parasail_sw_rowcol_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_scan "parasail_sw_trace_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_scan "parasail_sw_stats_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_scan "parasail_sw_stats_table_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_scan "parasail_sw_stats_rowcol_scan"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_scan_64 "parasail_nw_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_scan_32 "parasail_nw_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_scan_16 "parasail_nw_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_scan_8 "parasail_nw_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_scan_sat "parasail_nw_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_striped_64 "parasail_nw_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_striped_32 "parasail_nw_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_striped_16 "parasail_nw_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_striped_8 "parasail_nw_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_striped_sat "parasail_nw_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_diag_64 "parasail_nw_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_diag_32 "parasail_nw_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_diag_16 "parasail_nw_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_diag_8 "parasail_nw_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_diag_sat "parasail_nw_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_scan_64 "parasail_nw_table_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_scan_32 "parasail_nw_table_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_scan_16 "parasail_nw_table_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_scan_8 "parasail_nw_table_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_scan_sat "parasail_nw_table_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_striped_64 "parasail_nw_table_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_striped_32 "parasail_nw_table_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_striped_16 "parasail_nw_table_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_striped_8 "parasail_nw_table_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_striped_sat "parasail_nw_table_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_diag_64 "parasail_nw_table_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_diag_32 "parasail_nw_table_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_diag_16 "parasail_nw_table_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_diag_8 "parasail_nw_table_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_table_diag_sat "parasail_nw_table_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_scan_64 "parasail_nw_rowcol_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_scan_32 "parasail_nw_rowcol_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_scan_16 "parasail_nw_rowcol_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_scan_8 "parasail_nw_rowcol_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_scan_sat "parasail_nw_rowcol_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_striped_64 "parasail_nw_rowcol_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_striped_32 "parasail_nw_rowcol_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_striped_16 "parasail_nw_rowcol_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_striped_8 "parasail_nw_rowcol_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_striped_sat "parasail_nw_rowcol_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_diag_64 "parasail_nw_rowcol_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_diag_32 "parasail_nw_rowcol_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_diag_16 "parasail_nw_rowcol_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_diag_8 "parasail_nw_rowcol_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_rowcol_diag_sat "parasail_nw_rowcol_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_scan_64 "parasail_nw_trace_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_scan_32 "parasail_nw_trace_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_scan_16 "parasail_nw_trace_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_scan_8 "parasail_nw_trace_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_scan_sat "parasail_nw_trace_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_striped_64 "parasail_nw_trace_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_striped_32 "parasail_nw_trace_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_striped_16 "parasail_nw_trace_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_striped_8 "parasail_nw_trace_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_striped_sat "parasail_nw_trace_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_diag_64 "parasail_nw_trace_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_diag_32 "parasail_nw_trace_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_diag_16 "parasail_nw_trace_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_diag_8 "parasail_nw_trace_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_trace_diag_sat "parasail_nw_trace_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_scan_64 "parasail_nw_stats_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_scan_32 "parasail_nw_stats_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_scan_16 "parasail_nw_stats_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_scan_8 "parasail_nw_stats_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_scan_sat "parasail_nw_stats_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_striped_64 "parasail_nw_stats_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_striped_32 "parasail_nw_stats_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_striped_16 "parasail_nw_stats_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_striped_8 "parasail_nw_stats_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_striped_sat "parasail_nw_stats_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_diag_64 "parasail_nw_stats_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_diag_32 "parasail_nw_stats_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_diag_16 "parasail_nw_stats_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_diag_8 "parasail_nw_stats_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_diag_sat "parasail_nw_stats_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_scan_64 "parasail_nw_stats_table_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_scan_32 "parasail_nw_stats_table_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_scan_16 "parasail_nw_stats_table_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_scan_8 "parasail_nw_stats_table_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_scan_sat "parasail_nw_stats_table_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_striped_64 "parasail_nw_stats_table_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_striped_32 "parasail_nw_stats_table_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_striped_16 "parasail_nw_stats_table_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_striped_8 "parasail_nw_stats_table_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_striped_sat "parasail_nw_stats_table_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_diag_64 "parasail_nw_stats_table_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_diag_32 "parasail_nw_stats_table_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_diag_16 "parasail_nw_stats_table_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_diag_8 "parasail_nw_stats_table_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_table_diag_sat "parasail_nw_stats_table_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_scan_64 "parasail_nw_stats_rowcol_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_scan_32 "parasail_nw_stats_rowcol_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_scan_16 "parasail_nw_stats_rowcol_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_scan_8 "parasail_nw_stats_rowcol_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_scan_sat "parasail_nw_stats_rowcol_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_striped_64 "parasail_nw_stats_rowcol_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_striped_32 "parasail_nw_stats_rowcol_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_striped_16 "parasail_nw_stats_rowcol_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_striped_8 "parasail_nw_stats_rowcol_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_striped_sat "parasail_nw_stats_rowcol_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_diag_64 "parasail_nw_stats_rowcol_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_diag_32 "parasail_nw_stats_rowcol_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_diag_16 "parasail_nw_stats_rowcol_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_diag_8 "parasail_nw_stats_rowcol_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_nw_stats_rowcol_diag_sat "parasail_nw_stats_rowcol_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_scan_64 "parasail_sg_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_scan_32 "parasail_sg_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_scan_16 "parasail_sg_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_scan_8 "parasail_sg_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_scan_sat "parasail_sg_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_striped_64 "parasail_sg_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_striped_32 "parasail_sg_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_striped_16 "parasail_sg_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_striped_8 "parasail_sg_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_striped_sat "parasail_sg_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_diag_64 "parasail_sg_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_diag_32 "parasail_sg_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_diag_16 "parasail_sg_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_diag_8 "parasail_sg_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_diag_sat "parasail_sg_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_scan_64 "parasail_sg_table_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_scan_32 "parasail_sg_table_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_scan_16 "parasail_sg_table_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_scan_8 "parasail_sg_table_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_scan_sat "parasail_sg_table_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_striped_64 "parasail_sg_table_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_striped_32 "parasail_sg_table_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_striped_16 "parasail_sg_table_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_striped_8 "parasail_sg_table_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_striped_sat "parasail_sg_table_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_diag_64 "parasail_sg_table_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_diag_32 "parasail_sg_table_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_diag_16 "parasail_sg_table_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_diag_8 "parasail_sg_table_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_table_diag_sat "parasail_sg_table_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_scan_64 "parasail_sg_rowcol_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_scan_32 "parasail_sg_rowcol_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_scan_16 "parasail_sg_rowcol_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_scan_8 "parasail_sg_rowcol_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_scan_sat "parasail_sg_rowcol_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_striped_64 "parasail_sg_rowcol_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_striped_32 "parasail_sg_rowcol_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_striped_16 "parasail_sg_rowcol_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_striped_8 "parasail_sg_rowcol_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_striped_sat "parasail_sg_rowcol_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_diag_64 "parasail_sg_rowcol_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_diag_32 "parasail_sg_rowcol_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_diag_16 "parasail_sg_rowcol_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_diag_8 "parasail_sg_rowcol_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_rowcol_diag_sat "parasail_sg_rowcol_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_scan_64 "parasail_sg_trace_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_scan_32 "parasail_sg_trace_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_scan_16 "parasail_sg_trace_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_scan_8 "parasail_sg_trace_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_scan_sat "parasail_sg_trace_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_striped_64 "parasail_sg_trace_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_striped_32 "parasail_sg_trace_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_striped_16 "parasail_sg_trace_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_striped_8 "parasail_sg_trace_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_striped_sat "parasail_sg_trace_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_diag_64 "parasail_sg_trace_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_diag_32 "parasail_sg_trace_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_diag_16 "parasail_sg_trace_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_diag_8 "parasail_sg_trace_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_trace_diag_sat "parasail_sg_trace_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_scan_64 "parasail_sg_stats_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_scan_32 "parasail_sg_stats_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_scan_16 "parasail_sg_stats_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_scan_8 "parasail_sg_stats_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_scan_sat "parasail_sg_stats_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_striped_64 "parasail_sg_stats_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_striped_32 "parasail_sg_stats_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_striped_16 "parasail_sg_stats_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_striped_8 "parasail_sg_stats_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_striped_sat "parasail_sg_stats_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_diag_64 "parasail_sg_stats_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_diag_32 "parasail_sg_stats_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_diag_16 "parasail_sg_stats_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_diag_8 "parasail_sg_stats_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_diag_sat "parasail_sg_stats_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_scan_64 "parasail_sg_stats_table_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_scan_32 "parasail_sg_stats_table_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_scan_16 "parasail_sg_stats_table_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_scan_8 "parasail_sg_stats_table_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_scan_sat "parasail_sg_stats_table_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_striped_64 "parasail_sg_stats_table_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_striped_32 "parasail_sg_stats_table_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_striped_16 "parasail_sg_stats_table_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_striped_8 "parasail_sg_stats_table_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_striped_sat "parasail_sg_stats_table_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_diag_64 "parasail_sg_stats_table_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_diag_32 "parasail_sg_stats_table_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_diag_16 "parasail_sg_stats_table_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_diag_8 "parasail_sg_stats_table_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_table_diag_sat "parasail_sg_stats_table_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_scan_64 "parasail_sg_stats_rowcol_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_scan_32 "parasail_sg_stats_rowcol_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_scan_16 "parasail_sg_stats_rowcol_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_scan_8 "parasail_sg_stats_rowcol_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_scan_sat "parasail_sg_stats_rowcol_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_striped_64 "parasail_sg_stats_rowcol_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_striped_32 "parasail_sg_stats_rowcol_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_striped_16 "parasail_sg_stats_rowcol_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_striped_8 "parasail_sg_stats_rowcol_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_striped_sat "parasail_sg_stats_rowcol_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_diag_64 "parasail_sg_stats_rowcol_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_diag_32 "parasail_sg_stats_rowcol_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_diag_16 "parasail_sg_stats_rowcol_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_diag_8 "parasail_sg_stats_rowcol_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sg_stats_rowcol_diag_sat "parasail_sg_stats_rowcol_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_scan_64 "parasail_sw_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_scan_32 "parasail_sw_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_scan_16 "parasail_sw_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_scan_8 "parasail_sw_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_scan_sat "parasail_sw_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_striped_64 "parasail_sw_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_striped_32 "parasail_sw_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_striped_16 "parasail_sw_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_striped_8 "parasail_sw_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_striped_sat "parasail_sw_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_diag_64 "parasail_sw_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_diag_32 "parasail_sw_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_diag_16 "parasail_sw_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_diag_8 "parasail_sw_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_diag_sat "parasail_sw_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_scan_64 "parasail_sw_table_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_scan_32 "parasail_sw_table_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_scan_16 "parasail_sw_table_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_scan_8 "parasail_sw_table_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_scan_sat "parasail_sw_table_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_striped_64 "parasail_sw_table_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_striped_32 "parasail_sw_table_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_striped_16 "parasail_sw_table_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_striped_8 "parasail_sw_table_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_striped_sat "parasail_sw_table_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_diag_64 "parasail_sw_table_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_diag_32 "parasail_sw_table_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_diag_16 "parasail_sw_table_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_diag_8 "parasail_sw_table_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_table_diag_sat "parasail_sw_table_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_scan_64 "parasail_sw_rowcol_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_scan_32 "parasail_sw_rowcol_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_scan_16 "parasail_sw_rowcol_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_scan_8 "parasail_sw_rowcol_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_scan_sat "parasail_sw_rowcol_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_striped_64 "parasail_sw_rowcol_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_striped_32 "parasail_sw_rowcol_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_striped_16 "parasail_sw_rowcol_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_striped_8 "parasail_sw_rowcol_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_striped_sat "parasail_sw_rowcol_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_diag_64 "parasail_sw_rowcol_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_diag_32 "parasail_sw_rowcol_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_diag_16 "parasail_sw_rowcol_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_diag_8 "parasail_sw_rowcol_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_rowcol_diag_sat "parasail_sw_rowcol_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_scan_64 "parasail_sw_trace_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_scan_32 "parasail_sw_trace_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_scan_16 "parasail_sw_trace_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_scan_8 "parasail_sw_trace_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_scan_sat "parasail_sw_trace_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_striped_64 "parasail_sw_trace_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_striped_32 "parasail_sw_trace_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_striped_16 "parasail_sw_trace_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_striped_8 "parasail_sw_trace_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_striped_sat "parasail_sw_trace_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_diag_64 "parasail_sw_trace_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_diag_32 "parasail_sw_trace_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_diag_16 "parasail_sw_trace_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_diag_8 "parasail_sw_trace_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_trace_diag_sat "parasail_sw_trace_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_scan_64 "parasail_sw_stats_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_scan_32 "parasail_sw_stats_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_scan_16 "parasail_sw_stats_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_scan_8 "parasail_sw_stats_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_scan_sat "parasail_sw_stats_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_striped_64 "parasail_sw_stats_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_striped_32 "parasail_sw_stats_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_striped_16 "parasail_sw_stats_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_striped_8 "parasail_sw_stats_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_striped_sat "parasail_sw_stats_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_diag_64 "parasail_sw_stats_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_diag_32 "parasail_sw_stats_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_diag_16 "parasail_sw_stats_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_diag_8 "parasail_sw_stats_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_diag_sat "parasail_sw_stats_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_scan_64 "parasail_sw_stats_table_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_scan_32 "parasail_sw_stats_table_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_scan_16 "parasail_sw_stats_table_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_scan_8 "parasail_sw_stats_table_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_scan_sat "parasail_sw_stats_table_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_striped_64 "parasail_sw_stats_table_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_striped_32 "parasail_sw_stats_table_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_striped_16 "parasail_sw_stats_table_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_striped_8 "parasail_sw_stats_table_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_striped_sat "parasail_sw_stats_table_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_diag_64 "parasail_sw_stats_table_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_diag_32 "parasail_sw_stats_table_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_diag_16 "parasail_sw_stats_table_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_diag_8 "parasail_sw_stats_table_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_table_diag_sat "parasail_sw_stats_table_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_scan_64 "parasail_sw_stats_rowcol_scan_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_scan_32 "parasail_sw_stats_rowcol_scan_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_scan_16 "parasail_sw_stats_rowcol_scan_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_scan_8 "parasail_sw_stats_rowcol_scan_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_scan_sat "parasail_sw_stats_rowcol_scan_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_striped_64 "parasail_sw_stats_rowcol_striped_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_striped_32 "parasail_sw_stats_rowcol_striped_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_striped_16 "parasail_sw_stats_rowcol_striped_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_striped_8 "parasail_sw_stats_rowcol_striped_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_striped_sat "parasail_sw_stats_rowcol_striped_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_diag_64 "parasail_sw_stats_rowcol_diag_64"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_diag_32 "parasail_sw_stats_rowcol_diag_32"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_diag_16 "parasail_sw_stats_rowcol_diag_16"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_diag_8 "parasail_sw_stats_rowcol_diag_8"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

    parasail_result* _c_parasail_sw_stats_rowcol_diag_sat "parasail_sw_stats_rowcol_diag_sat"(
        const char * const s1, const int s1Len,
        const char * const s2, const int s2Len,
        const int open, const int gap,
        const parasail_matrix* matrix)

def parasail_nw(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_scan(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_scan(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_table_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_table_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_rowcol_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_rowcol_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_trace_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_trace_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_table_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_table_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_nw_stats_rowcol_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_nw_stats_rowcol_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_table_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_table_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_rowcol_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_rowcol_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_trace_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_trace_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_table_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_table_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sg_stats_rowcol_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sg_stats_rowcol_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_table_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_table_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_rowcol_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_rowcol_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_trace_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_trace_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_table_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_table_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_scan_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_scan_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_scan_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_scan_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_scan_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_scan_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_scan_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_scan_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_scan_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_scan_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_striped_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_striped_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_striped_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_striped_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_striped_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_striped_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_striped_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_striped_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_striped_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_striped_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_diag_64(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_diag_64(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_diag_32(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_diag_32(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_diag_16(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_diag_16(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_diag_8(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_diag_8(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


def parasail_sw_stats_rowcol_diag_sat(s1, s2, open_, extend, matrix):
    cdef parasail_result *result
    cdef Result wrapped_result

    result = _c_parasail_sw_stats_rowcol_diag_sat(
        B(s1), len(s1), B(s2), len(s2), open_, extend,
        (<Matrix>matrix).pointer
    )
    if result != NULL:
        wrapped_result = Result(B(s1), len(s1), B(s2), len(s2))
        wrapped_result.pointer = result
        return wrapped_result


